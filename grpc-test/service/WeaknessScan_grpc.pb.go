// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: WeaknessScan.proto

package hello_grpc_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeaknessClient is the client API for Weakness service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeaknessClient interface {
	WeaknessUpload(ctx context.Context, in *WeaknessScanRequest, opts ...grpc.CallOption) (*WeaknessScanResponse, error)
}

type weaknessClient struct {
	cc grpc.ClientConnInterface
}

func NewWeaknessClient(cc grpc.ClientConnInterface) WeaknessClient {
	return &weaknessClient{cc}
}

func (c *weaknessClient) WeaknessUpload(ctx context.Context, in *WeaknessScanRequest, opts ...grpc.CallOption) (*WeaknessScanResponse, error) {
	out := new(WeaknessScanResponse)
	err := c.cc.Invoke(ctx, "/service.Weakness/WeaknessUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeaknessServer is the server API for Weakness service.
// All implementations must embed UnimplementedWeaknessServer
// for forward compatibility
type WeaknessServer interface {
	WeaknessUpload(context.Context, *WeaknessScanRequest) (*WeaknessScanResponse, error)
	mustEmbedUnimplementedWeaknessServer()
}

// UnimplementedWeaknessServer must be embedded to have forward compatible implementations.
type UnimplementedWeaknessServer struct {
}

func (UnimplementedWeaknessServer) WeaknessUpload(context.Context, *WeaknessScanRequest) (*WeaknessScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeaknessUpload not implemented")
}
func (UnimplementedWeaknessServer) mustEmbedUnimplementedWeaknessServer() {}

// UnsafeWeaknessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeaknessServer will
// result in compilation errors.
type UnsafeWeaknessServer interface {
	mustEmbedUnimplementedWeaknessServer()
}

func RegisterWeaknessServer(s grpc.ServiceRegistrar, srv WeaknessServer) {
	s.RegisterService(&Weakness_ServiceDesc, srv)
}

func _Weakness_WeaknessUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeaknessScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeaknessServer).WeaknessUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Weakness/WeaknessUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeaknessServer).WeaknessUpload(ctx, req.(*WeaknessScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Weakness_ServiceDesc is the grpc.ServiceDesc for Weakness service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Weakness_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Weakness",
	HandlerType: (*WeaknessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WeaknessUpload",
			Handler:    _Weakness_WeaknessUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WeaknessScan.proto",
}
